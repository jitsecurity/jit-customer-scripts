apiVersion: v1
kind: ConfigMap
metadata:
  name: jit-ecr-script
  namespace: {{ .Values.namespace }}
data:
  jit-ecr-script.sh: |
    #!/bin/sh
    set -e

    # Install jq
    apk add --no-cache jq

    # Wait for the secret to be available
    until kubectl get secret ecr-registry-helper-secrets -n {{ .Values.namespace }}; do
      echo "Waiting for secret ecr-registry-helper-secrets to be created..."
      sleep 5
    done

    # Read credentials from the secret
    CLIENT_ID=$(kubectl get secret ecr-registry-helper-secrets -n {{ .Values.namespace }} -o jsonpath='{.data.client_id}' | base64 -d)
    SECRET=$(kubectl get secret ecr-registry-helper-secrets -n {{ .Values.namespace }} -o jsonpath='{.data.secret}' | base64 -d)

    # Perform login to get access token
    echo "Requesting access token..."
    AUTH_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST {{ .Values.jit_base_url }}/authentication/login \
      -H "Content-Type: application/json" \
      -d "{\"clientId\": \"$CLIENT_ID\", \"secret\": \"$SECRET\"}")
    AUTH_STATUS=$(echo "$AUTH_RESPONSE" | tail -n1)
    AUTH_BODY=$(echo "$AUTH_RESPONSE" | sed '$d')

    if [ "$AUTH_STATUS" -ne 200 ]; then
      echo "Failed to obtain access token. HTTP Status: $AUTH_STATUS"
      echo "Response body: $AUTH_BODY"
      exit 1
    fi

    ACCESS_TOKEN=$(echo "$AUTH_BODY" | jq -r '.accessToken')

    if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" = "null" ]; then
      echo "Failed to extract access token from response"
      echo "Response body: $AUTH_BODY"
      exit 1
    fi

    echo "Access token obtained successfully"

    # Use access token to get registry credentials
    echo "Requesting registry token..."
    REGISTRY_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST {{ .Values.jit_base_url }}/authentication/registry/login \
      -H "Authorization: Bearer $ACCESS_TOKEN")
    REGISTRY_STATUS=$(echo "$REGISTRY_RESPONSE" | tail -n1)
    REGISTRY_BODY=$(echo "$REGISTRY_RESPONSE" | sed '$d')

    if [ "$REGISTRY_STATUS" -ne 200 ]; then
      echo "Failed to obtain registry token. HTTP Status: $REGISTRY_STATUS"
      echo "Response body: $REGISTRY_BODY"
      exit 1
    fi

    REGISTRY_TOKEN="$REGISTRY_BODY"

    if [ -z "$REGISTRY_TOKEN" ]; then
      echo "Failed to obtain registry token"
      echo "Response body: $REGISTRY_BODY"
      exit 1
    fi

    echo "registry token obtained successfully"

    # Delete existing Kubernetes Docker registry secret (ignore if not found)
    echo "Deleting existing Kubernetes secret (if any)..."
    kubectl delete secret {{ .Values.jit_ecr_secret_name }} -n {{ .Values.namespace }} 2>/dev/null || true

    # Create new Kubernetes Docker registry secret
    echo "Creating new Kubernetes secret..."
    kubectl create secret docker-registry {{ .Values.jit_ecr_secret_name }} \
      --docker-server={{ .Values.registry_name }} \
      --docker-username=AWS \
      --docker-password="$REGISTRY_TOKEN" \
      --namespace={{ .Values.namespace }}

    # Get current date and time
    CURRENT_DATE=$(date "+%Y-%m-%d %H:%M:%S")

    echo "Registry credentials updated successfully on $CURRENT_DATE"
